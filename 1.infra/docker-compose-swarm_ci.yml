version: '3.6'

services:
  jenkins:
    image: ddtmx/jenkins:latest
    entrypoint: ["/sbin/tini" , "--", "/usr/local/bin/init.sh"]
#    networks:
#      - app
    deploy:
      placement:
        constraints: [node.labels.jenkins == jenkins]
    volumes:
      - "jenkins:/var/jenkins_home"                  # persistent
      - "/var/run/docker.sock:/var/run/docker.sock"  # docker from jenkins
      - "/usr/local/bin/docker:/bin/docker"          # docker from jenkins
    ports:
      - 8880:8080
      - 50000:50000
#    environment:
#      - JENKINS_UC=https://updates.jenkins.io
#      - JENKINS_UC_EXPERIMENTAL=https://updates.jenkins.io/experimental
#      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false
#      - JENKINS_OPTIONS=--argumentsRealm.passwd.admin=password --argumentsRealm.roles.user=admin --argumentsRealm.roles.admin=admin
#      - JENKINS_SLAVE_AGENT_PORT=50000
    configs:
      - source: jenkins-init.sh
        target: /usr/local/bin/init.sh
        mode: 0777

  # artifactory
  artifactory_db:
    image: docker.bintray.io/postgres:9.5.2
    ports:
     - 5432:5432
    environment:
     - POSTGRES_DB=artifactory
     # The following must match the DB_USER and DB_PASSWORD values passed to Artifactory
     - POSTGRES_USER=artifactory
     - POSTGRES_PASSWORD=password
    volumes:
     - artifactory_db:/var/lib/postgresql/data
#    networks:
#      - app
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.labels.ci == db]

  artifactory:
    image: docker.bintray.io/jfrog/artifactory-pro:5.4.4
    ports:
     - 8881:8081
    depends_on:
     - artifactory_db
#    networks:
#      - app
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.labels.ci == repotest]
    volumes:
     - artifactory:/var/opt/jfrog/artifactory
    environment:
     - DB_TYPE=postgresql
     # The following must match the POSTGRES_USER and POSTGRES_PASSWORD values passed to PostgreSQL
     - DB_PORT=5432
     - DB_HOST=artifactory_db
     - DB_USER=artifactory
     - DB_PASSWORD=password
     # Add extra Java options by uncommenting the following line
     #- EXTRA_JAVA_OPTIONS=-Xmx4g

  # sonarqube
  sonarqube:
    image: sonarqube
#    networks:
#      - app
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
#        delay: 5s
#        max_attempts: 3
      placement:
        constraints: [node.labels.ci == repotest]
    ports:
      - "8882:9000"
    depends_on:
      - sonarqube_db
    environment:
      - SONARQUBE_JDBC_URL=jdbc:postgresql://sonarqube_db:5432/sonar
    volumes:
      - sonarqube:/opt/sonarqube

  sonarqube_db:
    image: postgres
#    networks:
#      - app
#    ports:
#      - "5442:5432"
    deploy:
      mode: replicated
      replicas: 1
      restart_policy:
        condition: on-failure
#        delay: 5s
#        max_attempts: 3
      placement:
        constraints: [node.labels.ci == db]
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
    volumes:
      - sonarqube_db:/var/lib/postgresql
      # This needs explicit mapping due to https://github.com/docker-library/postgres/blob/4e48e3228a30763913ece952c611e5e9b95c8759/Dockerfile.template#L52
      - sonarqube_db_data:/var/lib/postgresql/data



configs:
  jenkins-init.sh:
    file: ./services/jenkins/init.sh

networks:
  app:
    driver: overlay
    driver_opts:                        # new added
        encrypted: "true"               # new added

volumes:
  jenkins:
  artifactory:
  artifactory_db:
  sonarqube:
  sonarqube_db:
  sonarqube_db_data:

